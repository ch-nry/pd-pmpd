name: Build Pure-Data externals

on: [push, pull_request]

env:
  PD_VERSION: 0.54-1

jobs:
  build_ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        floatsize: [32, 64]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Clone Pure-Data
      run: git clone --branch=${PD_VERSION} --depth=1 https://github.com/pure-data/pure-data.git

    - name: Update package lists
      run: sudo apt-get update -yqq

    - name: Install dependencies
      run: sudo apt-get install -yqq ninja-build cmake --fix-missing

    - name: Prepare cross-compilation for arm64
      if: matrix.arch == 'arm64'
      run: |
        sudo apt install gcc-aarch64-linux-gnu -y
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Build
      run: |
        cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DPUREDATA_ARCH_SUFFIX=${{ matrix.arch }} -DPUREDATA_FLOATSIZE=${{ matrix.floatsize }}
        cmake --build build
        cmake --build build --target install

    - name: Archive Package
      uses: actions/upload-artifact@v4
      with:
        name: pmpd-ubuntu-${{ matrix.arch }}-pd${{ matrix.floatsize }}
        path: build/package/pmpd

  build_rpi:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Clone Pure-Data
      run: git clone --branch=${PD_VERSION} --depth=1 https://github.com/pure-data/pure-data.git

    - name: Install Dependencies
      run: |
        sudo apt-get update && sudo apt-get upgrade -yqq
        sudo apt-get update && DEBIAN_FRONTEND=noninteractive sudo apt-get install -yqq git build-essential cmake gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf ninja-build puredata

    - name: Build (Single Precision)
      run: ./cross_compile_rpi.sh

    - name: Archive Package
      uses: actions/upload-artifact@v4
      with:
        name: pmpd-rpi-pd32
        path: build/package/pmpd

  build_macos_universal:
    runs-on: macos-latest
    strategy:
      matrix:
        floatsize: [32, 64]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Clone Pure-Data
      run: git clone --branch=${PD_VERSION} --depth=1 https://github.com/pure-data/pure-data.git

    - name: Install Dependencies
      run: |
        brew update
        brew install ninja
        if brew list cmake &>/dev/null; then
          echo "cmake is already installed."
        else
          echo "Installing cmake..."
          brew install --formula cmake
        fi

    - name: Build for x86_64 and ARM64
      run: |
        cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.14" -DPUREDATA_FLOATSIZE=${{ matrix.floatsize }}
        cmake --build build
        cmake --build build --target install

    - name: Archive Package
      uses: actions/upload-artifact@v4
      with:
        name: pmpd-macos-pd${{ matrix.floatsize }}
        path: build/package/pmpd

  build_windows_i386:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Download Pure-Data Binaries
      run: |
        Invoke-WebRequest -Uri "http://msp.ucsd.edu/Software/pd-${env:PD_VERSION}-i386.msw.zip" -OutFile "pd-${env:PD_VERSION}-i386.msw.zip"
        Expand-Archive -Path "pd-${env:PD_VERSION}-i386.msw.zip" -DestinationPath .

    - name: Build (Single Precision)
      run: |
        cmake -S . -B build -DPUREDATA_INCLUDE_DIRS="pd-${env:PD_VERSION}-i386/src" -DPUREDATA_LIB="pd-${env:PD_VERSION}-i386/bin/pd.lib" -G "Visual Studio 17 2022" -A Win32
        cmake --build build --config Release
        cmake --build build --config Release --target install

    - name: Archive Package
      uses: actions/upload-artifact@v4
      with:
        name: pmpd-windows-pd32
        path: build/package/pmpd

  build_windows_x64:
    runs-on: windows-latest
    strategy:
      matrix:
        floatsize: [32, 64]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Download Pure-Data Binaries
      run: |
        if (${{ matrix.floatsize }} -eq 32) {
          Invoke-WebRequest -Uri "http://msp.ucsd.edu/Software/pd-${{env.PD_VERSION}}.msw.zip" -OutFile "pd${{ matrix.floatsize }}-${{env.PD_VERSION}}.msw.zip"
        } else {
          Invoke-WebRequest -Uri "https://puredata.info/downloads/pure-data/releases/${{env.PD_VERSION}}-pd64/Pd64-${{env.PD_VERSION}}.msw.zip" -OutFile "pd${{ matrix.floatsize }}-${{env.PD_VERSION}}.msw.zip"
        }
        Expand-Archive -Path "pd${{ matrix.floatsize }}-${{env.PD_VERSION}}.msw.zip" -DestinationPath .

    - name: Build
      run: |
        if (${{ matrix.floatsize }} -eq 32) {
          cmake -S . -B build -DPUREDATA_INCLUDE_DIRS="pd-${env:PD_VERSION}/src" -DPUREDATA_LIB="pd-${env:PD_VERSION}/bin/pd.lib" -G "Visual Studio 17 2022" -A x64 -DPUREDATA_FLOATSIZE=${{ matrix.floatsize }}
        } else {
          cmake -S . -B build -DPUREDATA_INCLUDE_DIRS="Pd-0.54.1/src" -DPUREDATA_LIB="Pd-0.54.1/bin/pd64.lib" -G "Visual Studio 17 2022" -A x64 -DPUREDATA_FLOATSIZE=${{ matrix.floatsize }}
        }
        cmake --build build --config Release
        cmake --build build --config Release --target install

    - name: Archive Package
      uses: actions/upload-artifact@v4
      with:
        name: pmpd-windows-x64-pd${{ matrix.floatsize }}
        path: build/package/pmpd

  package_release_windows:
    runs-on: ubuntu-latest
    needs: [ build_windows_i386, build_windows_x64 ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-windows-pd32
          path: artifacts/windows
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-windows-x64-pd32
          path: artifacts/windows-x64
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-windows-x64-pd64
          path: artifacts/windows-x64
      - name: Merge Artifacts
        run: |
          mkdir pmpd
          cp -rn artifacts/*/* pmpd/
      - name: Rezip
        run: |
          SHORT=${GITHUB_REF:11} # remove the 'refs/tags/' prefix
          SLUG=${SHORT//\//_} # replace '/' with '_'
          zip -r pmpd-${SLUG}-win.zip pmpd
      - name: Upload release content as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pmpd-win
          path: pmpd
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: pmpd*.zip

  package_release_osx:
    runs-on: ubuntu-latest
    needs: [ build_macos_universal ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-macos-pd32
          path: artifacts/macos
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-macos-pd64
          path: artifacts/macos
      - name: Merge Artifacts
        run: |
          mkdir pmpd
          cp -rn artifacts/*/* pmpd/
      - name: Rezip
        run: |
          SHORT=${GITHUB_REF:11} # remove the 'refs/tags/' prefix
          SLUG=${SHORT//\//_} # replace '/' with '_'
          zip -r pmpd-${SLUG}-osx.zip pmpd
      - name: Upload release content as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pmpd-osx
          path: pmpd
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: pmpd*.zip

  package_release_linux:
    runs-on: ubuntu-latest
    needs: [ build_ubuntu, build_rpi ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-ubuntu-amd64-pd32
          path: artifacts/ubuntu
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-ubuntu-amd64-pd64
          path: artifacts/ubuntu
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-ubuntu-arm64-pd32
          path: artifacts/ubuntu
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-ubuntu-arm64-pd64
          path: artifacts/ubuntu
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-rpi-pd32
          path: artifacts/rpi
      - name: Merge Artifacts
        run: |
          mkdir pmpd
          cp -rn artifacts/*/* pmpd/
      - name: Rezip
        run: |
          SHORT=${GITHUB_REF:11} # remove the 'refs/tags/' prefix
          SLUG=${SHORT//\//_} # replace '/' with '_'
          zip -r pmpd-${SLUG}-linux.zip pmpd
      - name: Upload release content as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pmpd-linux
          path: pmpd
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: pmpd*.zip

  upload_build_to_deken:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: [ package_release_windows, package_release_osx, package_release_linux ]
    strategy:
      matrix:
        os: [win, osx, linux]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: pmpd-${{ matrix.os }}
          path: pmpd-${{ matrix.os }}
      - name: Create Deken Package
        shell: bash
        env:
          DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
          DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
        run: |
          SHORT=${GITHUB_REF:11} # remove the 'refs/tags/' prefix
          SLUG=${SHORT//\//_} # replace '/' with '_'
          docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
            --volume ${PWD}/pmpd-${{ matrix.os }}:/pmpd registry.git.iem.at/pd/deken \
            deken upload --no-source-error -v "${SLUG}" /pmpd

  upload_source_to_deken:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: [ upload_build_to_deken ] # waiting for build uploads to avoid src-only uploads in case of errors
    steps:
      - uses: actions/checkout@v4
        with:
          path: pmpd-src
      - name: Upload Source to Deken
        shell: bash
        env:
          DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
          DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
        run: |
          SHORT=${GITHUB_REF:11} # remove the 'refs/tags/' prefix
          SLUG=${SHORT//\//_} # replace '/' with '_'
          docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
            --volume ${PWD}/pmpd-src:/pmpd-src registry.git.iem.at/pd/deken \
            deken upload -v "${SLUG}" /pmpd-src
